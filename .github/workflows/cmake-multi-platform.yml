# .github/workflows/cmake-multi-platform.yml

name: CMake Multi-Platform Build (x86_64, armhf, arm64)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [x86_64, arm64, armhf]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies for cross-compilation
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            build-essential \
            gcc g++ \
            libcurl4-openssl-dev \
            libncurses-dev \
            libarchive-dev \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: Configure and build for ${{ matrix.platform }}
        run: |
          if [ "${{ matrix.platform }}" == "arm64" ]; then
            TOOLCHAIN_FILE="toolchains/arm64-toolchain.cmake"
            PLATFORM="aarch64-linux-gnu"
          elif [ "${{ matrix.platform }}" == "armhf" ]; then
            TOOLCHAIN_FILE="toolchains/armhf-toolchain.cmake"
            PLATFORM="arm-linux-gnueabihf"
          else
            TOOLCHAIN_FILE="toolchains/x86_64-toolchain.cmake"
            PLATFORM="x86_64-linux-gnu"
          fi

          mkdir -p build/${{ matrix.platform }}
          cd build/${{ matrix.platform }}
          cmake -DCMAKE_TOOLCHAIN_FILE=../../${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Release ..
          cmake --build . --config Release

      - name: List build output
        run: |
          ls -lh build/${{ matrix.platform }}

      - name: Compress and upload binary as artifact (ZIP)
        run: |
          zip -j Chrootux-${{ matrix.platform }}.zip build/${{ matrix.platform }}/Chrootux
        uses: actions/upload-artifact@v4
        with:
          name: Chrootux-${{ matrix.platform }}
          path: Chrootux-${{ matrix.platform }}.zip
